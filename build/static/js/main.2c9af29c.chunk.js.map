{"version":3,"sources":["logo.svg","Components/BurgerComponents.js","Redux/actions/BurgerAction.js","Redux/actions/Type/BurgerType.js","Components/MenuComponent.js","Components/BaiTapBerger.js","App.js","serviceWorker.js","Redux/reducer/BurgerReducer.js","Redux/reducer/rootReducer.js","index.js"],"names":["module","exports","BurgerComponents","renderBurger","burger","props","content","index","breadMid","i","push","key","className","this","Component","connect","state","BurgerReducer","tangGiamAction","food","bool","type","MenuComponent","renderMenu","menu","onClick","dispatch","total","BaiTapBerger","App","Boolean","window","location","hostname","match","burgerState","salad","cheese","beef","action","burgerUpdate","alert","rootReducer","combineReducers","reduxStore","createStore","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2c9af29c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nclass BurgerComponents extends Component {\n    renderBurger = () => {\n        let { burger } = this.props;\n        let content = [];\n        for (let index in burger) {\n            let breadMid = [];\n            for (let i = 0; i < burger[index]; i++) {\n                breadMid.push(<div key={i} className={index}></div>);\n            }\n            content.push(breadMid);\n        }\n        return content;\n    }\n    render() {\n        return (\n            <div>\n                <h3 className=\"text-center\">hamburger Options</h3>\n                <div className=\"breadTop\"></div>\n                {this.renderBurger()}\n                <div className=\"breadBottom\"></div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    burger: state.BurgerReducer.burger,\n});\nexport default connect(mapStateToProps)(BurgerComponents);\n","import { tang_giam } from './Type/BurgerType';\n\nexport const tangGiamAction = (food,bool) => {\n    return{\n        type:tang_giam,food,bool,\n    }\n}","export const tang_giam = \"tang_giam\";","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { tangGiamAction } from '../Redux/actions/BurgerAction';\nexport class MenuComponent extends Component {\n    renderMenu = () => {\n        let { menu, burger } = this.props;\n        let content = [];\n        for (let food in menu) {\n            content.push(\n                <tr key={food}>\n                    <td>{food}</td>\n                    <td>\n                        <button\n                            onClick={() => {\n                                this.props.dispatch(tangGiamAction(food, -1));\n                            }}\n                            className=\"btn btn-danger mx-2\"\n                        >\n                            -\n            </button>\n\n                        <span>{burger[food]}</span>\n\n                        <button\n                            onClick={() => {\n                                this.props.dispatch(tangGiamAction(food, 1));\n                            }}\n                            className=\"btn btn-success mx-2\"\n                        >\n                            +\n            </button>\n                    </td>\n                    <td>{menu[food] * burger[food]}</td>\n                </tr>\n            );\n        }\n        return content;\n    }\n    render() {\n        return (\n            <div>\n                <h3 className=\"text-center\">\n                    <table className=\"table\">\n                        <thead>\n                            <tr>\n                                <th>Food</th>\n                                <th></th>\n                                <th>Price</th>\n                            </tr>\n                        </thead>\n                        <tbody>{this.renderMenu()}</tbody>\n                        <tfoot>\n                            <tr>\n                                <td></td>\n                                <td>\n                                    <p>Total: </p>\n                                </td>\n                                <td>{this.props.total}$</td>\n                            </tr>\n                        </tfoot>\n                    </table>\n                </h3>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    burger: state.BurgerReducer.burger,\n    menu: state.BurgerReducer.menu,\n    total: state.BurgerReducer.total,\n})\n\nexport default connect(mapStateToProps)(MenuComponent)\n","import React, { Component } from 'react'\nimport BurgerComponents from './BurgerComponents'\nimport MenuComponent from './MenuComponent'\n\nexport default class BaiTapBerger extends Component {\n    render() {\n        return (\n            <div className=\"container-fluid mt-5\">\n                <div className=\"row\">\n                    <div className=\"col-8\">\n                        <BurgerComponents />\n                    </div>\n                    <div className=\"col-4\">\n                        <MenuComponent />\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport BaiTapBerger from './Components/BaiTapBerger';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BaiTapBerger />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { tang_giam } from '../actions/Type/BurgerType'\n// bergerState = stateDefault = initialState\nconst burgerState = {\n  burger: { salad: 1, cheese: 1, beef: 1 },\n  menu: {\n    salad: 2,\n    cheese: 1,\n    beef: 2,\n  },\n  total: 5,\n};\n\nconst BurgerReducer = (state = burgerState, action) => {\n  switch (action.type) {\n    case tang_giam: {\n      let burgerUpdate = { ...state.burger };\n\n      if (action.bool === 1 && burgerUpdate[action.food] < 9) {\n        burgerUpdate[action.food]++;\n        //Tính tổng tiền\n        state.total += action.bool * state.menu[action.food];\n      }\n      if (action.bool === -1 && burgerUpdate[action.food] > 0) {\n        burgerUpdate[action.food]--;\n        //Tính tổng tiền\n        state.total += action.bool * state.menu[action.food];\n      }\n      if (burgerUpdate.salad === burgerUpdate.cheese && burgerUpdate.cheese === burgerUpdate.beef && burgerUpdate.beef === 0) {\n        alert(\"Vui lòng chọn nhân!\");\n        burgerUpdate.salad = 1;\n        burgerUpdate.cheese = 1;\n        burgerUpdate.beef = 1;\n        state.total = 5;\n      }\n      state.burger = burgerUpdate;\n      return { ...state };\n    }\n    default:\n      return { ...state };\n  }\n}\nexport default BurgerReducer;","import { combineReducers } from 'redux';\nimport BurgerReducer from './BurgerReducer';\n\n//rootReducer quản lý state của toàn ứng dụng\nconst rootReducer = combineReducers({\n    //Nơi khai báo các state (reducer) theo từng nghiệp vụ\n    //BurgerReducer chứa burgerState\n    BurgerReducer,\n})\n\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// Set up redux\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './Redux/reducer/rootReducer';\n\n// reduxStore \nconst reduxStore = createStore(rootReducer);\nReactDOM.render(\n  <Provider store={reduxStore}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}